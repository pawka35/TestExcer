Для работы с БД использовал ORM SQLAlchemy, что избыточно для данного примера, но select напишет каждый, а другой
подход добавит + к вашему решению (надеюсь)
Также ввел следующие допущения (явно в задании не указаны, но мне показалось логичным):
В БД данные добавляются не с id, который пришел в json, а с автоинкрементом (ищем в таблице совпадения по всем полям,
кроме id, если не нашли - то добавляем (если она выглядит, как утка, плавает как утка...ну вы поняли)
Т.к. у разных пользователей могут быть обинаковые адреса, а у разных адресов - одинаковые координаты  (кроме того четко
указано, что посты ссылаются на пользователей) - это выражено через отношения таблиц:
- Поле userId поста ссылается на таблицу Users, если пользователя не существует, пост не добавлется (нам его потом все
 равно не вывести в веб-интерфейс, т.к. там в таблице указано соответствие)
- Поле address пользователя ссылается на таблицу Address
- Поле geo адреса ссылается на таблицу Geo
Таким образом исключаем дублирование информации в таблицах.

Если файл БД не существует, то генерируется исключение (новая не создается) - это искуственное ограничение, просто показать
как работаю с файлом инициализации скрипта (может еще один + ?)
