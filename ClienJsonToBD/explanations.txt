    Для работы с БД использовал ORM SQLAlchemy, что избыточно для данного примера, но select напишет каждый, а другой
подход добавит + к вашему решению (надеюсь)*

    Введены следующие допущения (явно в задании не указаны, но мне показалось логичным):
    - В БД данные добавляются не с id, который пришел в json, а с автоинкрементом (ищем в таблице совпадения по всем полям,
кроме id, если не нашли - то добавляем, иначе - зачем дублировать? (если она выглядит, как утка,
плавает как утка...ну вы поняли)
    - Т.к. у разных пользователей могут быть одинаковые адреса, а у разных адресов - одинаковые координаты  (кроме того четко
указано, что посты ссылаются на пользователей) - это выражено через отношения таблиц:
- Поле userId поста ссылается на таблицу Users, если пользователя не существует, пост не добавлется (нам его потом все
 равно не вывести в веб-интерфейс, т.к. там в таблице указано соответствие)
- Поле address пользователя ссылается на таблицу Address
- Поле geo адреса ссылается на таблицу Geo

    Если файл БД не существует, то генерируется исключение (новая не создается) - это искуственное ограничение, просто показать
как работаю с файлом инициализации.

    Update: уже после того как загрузил рабочую версию на github, еще раз перечитал письмо с заданием. Там перечислены инст-
рументы, которые можно использовать и среди  них нет SQLAlchemy. Соответсвенно, утвержения из первого абзаца данного
файла перестали казаться хорошей идеей. Чтобы соответсовать ТЗ переписал работу с БД в клиенте без использования
стороннего модуля(добавились файлы NotOrm_DBWork.py, NotOrm_Classes.py).
    Но и старых трудов стало жалко. Посему в скрипте можно использовать 2 пути исполнения.
По-умолчанию работает без установки SQLAlchemy.
Если необходимо перейти на работу с ней, в файле main.py раскоментировать строку 3(#from db.DBWork import *),
закоментировать строку 4 (from db.NotOrm_DBWork import *)
Для автотестов: раскоментировать строку 7(#from db.DBWork import WorkWithBD as WkBD), закоментировать строку 8
(from db.NotOrm_DBWork import WorkWithBD as WkBD)

